apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: companies-catalog-template
message: |-
  The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.

         Username: ${MONGODB_USER}
         Password: ${MONGODB_PASSWORD}
    Database Name: ${MONGODB_DATABASE}
    Connection URL: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${DATABASE_SERVICE_NAME}/${MONGODB_DATABASE}
    Image service catalog : IMAGE_SVC_CATALOG

  For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md.
metadata:
  annotations:
    description: |-  
      Companies Catalog service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md.
    openshift.io/display-name: Companies Catalog
    openshift.io/documentation-url: https://github.com/mouachan/companies-catalog
    openshift.io/long-description: This template provides a companies service catalog
    openshift.io/provider-display-name: Mourad Ouachani.
    openshift.io/support-url: https://github.com/mouachan/companies-catalog/issues
    tags: service catalog,companies management
  name: companies-catalog
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: companiesdb-init
  data:
    initdb.js: |
      db.createCollection( "companyInfo", {
      validator: { $jsonSchema: {
          bsonType: "object",
          required: [ "siren" ],
          properties: {
            siren: {
                bsonType: "string",
                description: "must be a string and is required"
            },
            denomination: {
                bsonType : "string",
                description: "must be a string"
            },
            siret: {
                bsonType : "string",
                description: "must be a string"
            },
            address: {
                bsonType : "string",
                description: "must be a string"
            },
            capitalSocial: {
                bsonType : "string",
                description: "must be a String"
            },
            chiffreAffaire: {
                bsonType : "string",
                description: "must be a String"
            },
              trancheEffectif: {
                bsonType : "string",
                description: "must be a String"
            },
              tva: {
                bsonType : "string",
                description: "must be a string"
            },
            immatriculationDate: {
                bsonType : "date",
                description: "must be a Date"
            },
              type: {
                bsonType : "string",
                description: "must be a string"
            },
            updateDate: {
                bsonType : "date",
                description: "must be a Date"
            }
          }
      } }
      });
      db.createCollection( "notation", {
        validator: { $jsonSchema: {
            bsonType: "object",
            required: [ "siren" ],
            properties: {
              siren: {
                  bsonType: "string",
                  description: "must be a string and is required"
              },
              dateCalcul: {
                  bsonType : "date",
                  description: "must be a date"
              },
              score: {
                  bsonType : "string",
                  description: "must be a string"
              },
              note: {
                  bsonType : "string",
                  description: "must be a string"
              },
              orientation: {
                  bsonType : "string",
                  description: "must be a String"
              },
              typeAiguillage: {
                  bsonType : "string",
                  description: "must be a String"
              },
                decoupageSectoriel: {
                  bsonType : "string",
                  description: "must be a String"
              },
                detail: {
                  bsonType : "string",
                  description: "must be a string"
              }
            }
        } }
      } );
      print("insert records");
      var dateCalcul = new Date(2020, 07, 24);
      db.notation.insert({  siren: "542107651",
              "dateCalcul": dateCalcul,
              "note": "A",
              "orientation": "Favorable",
              "score": "0.1",
              "typeAiguillage": "MODELE_1",
              "decoupageSectoriel": "1",
              "detail": ""
            });
        var immatriculationDate = new Date(1954, 12, 24);
        var updateDate =  new Date(2020, 04, 11);
        db.companyInfo.insert({  siren: "542107651",
          "denomination": "ENGIE",
          "siret": "54210765113030",
          "address": "ENGIE, 1 PL SAMUEL DE CHAMPLAIN 92400 COURBEVOIE",
          "tva": "FR03542107651",
          "immatriculationDate": immatriculationDate,
          type: "SA à conseil d'administration",
          "updateDate": updateDate,
          "capitalSocial": "2 435 285 011,00 €",
          "chiffreAffaire": "27 833 000 000.00 €",
          "trancheEffectif": "5000 à 9999 salariés"
                }
          );
        var immatriculationDate = new Date(1920, 12, 01);
        var updateDate =  new Date(2020, 04, 01);
        db.companyInfo.insert({  siren: "423646512",
          "denomination": "FOURNIL SAINT JACQUES",
          "siret": "    42364651200016",
          "address": "11 RUE DE LA TOMBE ISSOIRE 75014 PARIS",
          "tva": "FR03423646512",
          "immatriculationDate": immatriculationDate,
          "type": "Société à responsabilité limitée",
          "updateDate": updateDate,
          "capitalSocial": "7 622,45 €",
          "chiffreAffaire": "NON Connu",
          "trancheEffectif": "1 à 2 salariés"
        });
      var immatriculationDate = new Date(2009, 02, 26);
      var updateDate =  new Date(2020, 04, 01);
      db.companyInfo.insert({  siren: "510662190",
          denomination: "ASHILEA",
          siret: "    51066219000014",
          address: "49 AV DE SAINT OUEN 75017 PARIS",
          tva: "FR0510662190",
          "immatriculationDate": immatriculationDate,
          "type": "Société par actions simplifiée",
          "updateDate": updateDate,
          "capitalSocial": "7 622,45 €",
          "chiffreAffaire": "21 000,00 €",
          "trancheEffectif": "10 salariés"
          }
        );
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-admin_password: '{.data[''database-admin-password'']}'
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    name: ${DATABASE_SERVICE_NAME}
  stringData:
    database-admin-password: ${MONGODB_ADMIN_PASSWORD}
    database-name: ${MONGODB_DATABASE}
    database-password: ${MONGODB_PASSWORD}
    database-user: ${MONGODB_USER}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: mongodb://{.spec.clusterIP}:{.spec.ports[?(.name=="mongo")].port}
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: mongo
      nodePort: 0
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      name: ${DATABASE_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      type: Recreate
      recreateParams:
        post:
          execNewPod:
            command:
            - /bin/sh
            - -c
            - mongo mongodb.companies.svc.cluster.local/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval="${MONGO_INIT_SCRIPT}"
          containerName: mongodb
          failurePolicy: ignore
    template:
      metadata:
        labels:
          name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - capabilities: {}
          env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${DATABASE_SERVICE_NAME}
          - name: MONGO_INITDB_DATABASE
            value: ${MONGODB_DATABASE}
          - name: MONGO_INITDB_ROOT_USERNAME  
            value: ${MONGODB_USER}
          - name: MONGODB_INITDB_ROOT_PASSWORD
            value : ${MONGODB_PASSWORD}
          - name: MONGO_INIT_SCRIPT
            valueFrom:
              configMapKeyRef:
                name: companiesdb-init
                key: initdb.js 
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            initialDelaySeconds: 3
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: ${DATABASE_SERVICE_NAME}-data
          - mountPath: /var/lib/mongodb/data/initdb.js
            subpath: initdb.js 
            name: companiesdb-init
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${DATABASE_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${DATABASE_SERVICE_NAME}
        - name: companiesdb-init
          configMap:
            name: companiesdb-init
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:${MONGODB_VERSION}
          namespace: ${NAMESPACE}
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
  status: {}
- apiVersion: serving.knative.dev/v1
  kind: Service
  metadata:
    name: ${SVC_CATALOG_NAME}
  spec:
    template:
      metadata:
        name: companies-svc-v1
        annotations:
          # disable istio-proxy injection
          sidecar.istio.io/inject: "false"
          # the minimum number of pods to scale down to
          autoscaling.knative.dev/minScale: "1"
          # Target 10 crud-requests per pod.
          autoscaling.knative.dev/target: "10"
      spec:
        containers:
          - image: >-
              ${IMAGE_SVC_CATALOG}
            env:
              - name: JAVA_OPTS
                value: ${JAVA_OPTS}
              - name: MONGODB_CONNECTION_STRING
                value: 'mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${DATABASE_SERVICE_NAME}:27017/${MONGODB_DATABASE}'
        imagePullSecrets:
          - name: ${REGISTRY_SECRET}
parameters:
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: openshift
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: mongodb
- description: Username for MongoDB user that will be used for accessing the database.
  displayName: MongoDB Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: MONGODB_USER
  required: true
- description: Password for the MongoDB connection user.
  displayName: MongoDB Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MONGODB_PASSWORD
  required: true
- description: Name of the MongoDB database accessed.
  displayName: MongoDB Database Name
  name: MONGODB_DATABASE
  required: true
  value: sampledb
- description: Password for the database admin user.
  displayName: MongoDB Admin Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MONGODB_ADMIN_PASSWORD
  required: true
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Version of MongoDB image to be used (3.6 or latest).
  displayName: Version of MongoDB Image
  name: MONGODB_VERSION
  required: true
  value: "3.6"
- description: Java Options
  displayName: Java Options
  name: JAVA_OPTS
  required: true
  value: "-Dvertx.cacheDirBase=/work/vertx"
- description: Registry secret
  displayName: Registry Secret
  name: REGISTRY_SECRET
  required: true
- description: Image Service catalog 
  displayName: Image Service catalog 
  name: IMAGE_SVC_CATALOG
  required: true
- description: Service catalog name
  displayName: Service catalog name
  name: SVC_CATALOG_NAME
  required: true